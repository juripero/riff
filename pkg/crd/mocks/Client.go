// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import crd "github.com/projectriff/riff/pkg/crd"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Create provides a mock function with given fields: obj
func (_m *Client) Create(obj *crd.Manifest) (*crd.Manifest, error) {
	ret := _m.Called(obj)

	var r0 *crd.Manifest
	if rf, ok := ret.Get(0).(func(*crd.Manifest) *crd.Manifest); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crd.Manifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*crd.Manifest) error); ok {
		r1 = rf(obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: obj
func (_m *Client) Delete(obj *crd.Manifest) (*crd.Manifest, error) {
	ret := _m.Called(obj)

	var r0 *crd.Manifest
	if rf, ok := ret.Get(0).(func(*crd.Manifest) *crd.Manifest); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crd.Manifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*crd.Manifest) error); ok {
		r1 = rf(obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields:
func (_m *Client) Get() (*crd.Manifest, error) {
	ret := _m.Called()

	var r0 *crd.Manifest
	if rf, ok := ret.Get(0).(func() *crd.Manifest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crd.Manifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: obj
func (_m *Client) Update(obj *crd.Manifest) (*crd.Manifest, error) {
	ret := _m.Called(obj)

	var r0 *crd.Manifest
	if rf, ok := ret.Get(0).(func(*crd.Manifest) *crd.Manifest); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crd.Manifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*crd.Manifest) error); ok {
		r1 = rf(obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
